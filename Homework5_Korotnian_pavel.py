"""Задание 1. Написать функцию, принимающую один аргумент. Функция должна вывести на экран (c помощью print) тип
данных этого аргумента (type)"""


def foo(argument_for_type_identification):
    return print(type(argument_for_type_identification))


foo(123)

"""Задание 2. Написать функцию, принимающую два аргумента. Функция должна
- если оба аргумента относятся к числовым типам (int, float) - вернуть их произведение
- если к строкам - соединить в одну строку и вернуть
- если первый строка, а второй нет - вернуть словарь (dict), в котором ключ - первый аргумент, значение - второй
в любом другом случае вернуть кортеж (tuple) из аргументов"""


def foo(arg1, arg2):
    if type(arg1) is str and type(arg2) is str:
        res = arg1 + arg2
    elif type(arg1) is str and type(arg2) is not str:
        res = {arg1: arg2}
    elif type(arg1) in (int, float) and type(arg2) in (int, float):
        res = arg1 * arg2
    else:
        res = (arg1, arg2)
    return print(res)


foo(12, '1.42')

"""Задание 3. Дан словарь продавцов и цен на какой то товар у разных продавцов: { ‘citrus’: 47.999, ‘istudio’ 42.999,
‘moyo’: 49.999, ‘royal-service’: 37.245, ‘buy.ua’: 38.324, ‘g-store’: 37.166, ‘ipartner’: 38.988, ‘sota’: 37.720 }.
Написать функцию возвращающую список имен продавцов, чьи цены попадают в определенный диапазон. Функция должна
принимать словарь, начало и конец диапазона и возвращать список имен."""

sellers_dict = {
    'citrus': 47.999,
    'istudio': 42.999,
    'moyo': 49.999,
    'royal-service': 37.245,
    'buy.ua': 38.324,
    'g-store': 37.166,
    'ipartner': 38.988,
    'sota': 37.720
}


def foo(price_list, min_price, max_price):
    lst = []
    for sellers_name in price_list.keys():
        if min_price <= price_list[sellers_name] <= max_price:
            lst.append(sellers_name)
    return lst


print(foo(sellers_dict, 37.245, 40.999))

"""Задание 4.* Пользователь вводит строку произвольной длины. Написать функцию, которая должна вернуть словарь
следующего содержания: ключ - количество букв в слове, значение - список слов с таким количеством букв. Отдельным
ключем, например "0", записать количество пробелов. Отдельным ключем, например "punctuation", записать все уникальные
знаки препинания, которые есть в тексте. Например: { "0": количество пробелов в строке "1": list слов из одной буквы
"2": list слов из двух букв "3": list слов из трех букв и т.д ... "punctuation" : tuple уникальных знаков препинания
}"""
